import{R as p,F as G}from"./featureloader-a90a5108.js";import{J as h}from"./JSONFeature-5a5c1876.js";import{c as P,a as m,t as C}from"./Feature-627996e0.js";import{g as c,aX as F,c3 as s,bh as g,bq as O}from"./Layer-3b715193.js";class S extends h{constructor(e){e=e||{},super(),this.dataProjection=c(e.dataProjection?e.dataProjection:"EPSG:4326"),e.featureProjection&&(this.defaultFeatureProjection=c(e.featureProjection)),e.featureClass&&(this.featureClass=e.featureClass),this.geometryName_=e.geometryName,this.extractGeometryName_=e.extractGeometryName,this.supportedMediaTypes=["application/geo+json","application/vnd.geo+json"]}readFeatureFromObject(e,t){let r=null;e.type==="Feature"?r=e:r={type:"Feature",geometry:e,properties:null};const i=y(r.geometry);if(this.featureClass===p)return P({geometry:i,id:r.id,properties:r.properties},t);const n=new G;return this.geometryName_?n.setGeometryName(this.geometryName_):this.extractGeometryName_&&r.geometry_name&&n.setGeometryName(r.geometry_name),n.setGeometry(m(i,t)),"id"in r&&n.setId(r.id),r.properties&&n.setProperties(r.properties,!0),n}readFeaturesFromObject(e,t){const r=e;let i=null;if(r.type==="FeatureCollection"){const n=e;i=[];const a=n.features;for(let u=0,f=a.length;u<f;++u){const d=this.readFeatureFromObject(a[u],t);d&&i.push(d)}}else i=[this.readFeatureFromObject(e,t)];return i.flat()}readGeometryFromObject(e,t){return w(e,t)}readProjectionFromObject(e){const t=e.crs;let r;if(t)if(t.type=="name")r=c(t.properties.name);else if(t.type==="EPSG")r=c("EPSG:"+t.properties.code);else throw new Error("Unknown SRS type");else r=this.dataProjection;return r}writeFeatureObject(e,t){t=this.adaptOptions(t);const r={type:"Feature",geometry:null,properties:null},i=e.getId();if(i!==void 0&&(r.id=i),!e.hasProperties())return r;const n=e.getProperties(),a=e.getGeometry();return a&&(r.geometry=l(a,t),delete n[e.getGeometryName()]),F(n)||(r.properties=n),r}writeFeaturesObject(e,t){t=this.adaptOptions(t);const r=[];for(let i=0,n=e.length;i<n;++i)r.push(this.writeFeatureObject(e[i],t));return{type:"FeatureCollection",features:r}}writeGeometryObject(e,t){return l(e,this.adaptOptions(t))}}function y(o,e){if(!o)return null;let t;switch(o.type){case"Point":{t=M(o);break}case"LineString":{t=N(o);break}case"Polygon":{t=J(o);break}case"MultiPoint":{t=j(o);break}case"MultiLineString":{t=k(o);break}case"MultiPolygon":{t=L(o);break}case"GeometryCollection":{t=b(o);break}default:throw new Error("Unsupported GeoJSON type: "+o.type)}return t}function w(o,e){const t=y(o);return m(t,e)}function b(o,e){return o.geometries.map(function(r){return y(r)})}function M(o){const e=o.coordinates;return{type:"Point",flatCoordinates:e,layout:s(e.length)}}function N(o){var r;const e=o.coordinates,t=e.flat();return{type:"LineString",flatCoordinates:t,ends:[t.length],layout:s(((r=e[0])==null?void 0:r.length)||2)}}function k(o){var n,a;const e=o.coordinates,t=((a=(n=e[0])==null?void 0:n[0])==null?void 0:a.length)||2,r=[],i=g(r,0,e,t);return{type:"MultiLineString",flatCoordinates:r,ends:i,layout:s(t)}}function j(o){var t;const e=o.coordinates;return{type:"MultiPoint",flatCoordinates:e.flat(),layout:s(((t=e[0])==null?void 0:t.length)||2)}}function L(o){var n,a;const e=o.coordinates,t=[],r=((a=(n=e[0])==null?void 0:n[0])==null?void 0:a[0].length)||2,i=O(t,0,e,r);return{type:"MultiPolygon",flatCoordinates:t,ends:i,layout:s(r)}}function J(o){var n,a;const e=o.coordinates,t=[],r=(a=(n=e[0])==null?void 0:n[0])==null?void 0:a.length,i=g(t,0,e,r);return{type:"Polygon",flatCoordinates:t,ends:i,layout:s(r)}}function l(o,e){o=C(o,!0,e);const t=o.getType();let r;switch(t){case"Point":{r=I(o);break}case"LineString":{r=_(o);break}case"Polygon":{r=U(o,e);break}case"MultiPoint":{r=R(o);break}case"MultiLineString":{r=x(o);break}case"MultiPolygon":{r=A(o,e);break}case"GeometryCollection":{r=E(o,e);break}case"Circle":{r={type:"GeometryCollection",geometries:[]};break}default:throw new Error("Unsupported geometry type: "+t)}return r}function E(o,e){return e=Object.assign({},e),delete e.featureProjection,{type:"GeometryCollection",geometries:o.getGeometriesArray().map(function(r){return l(r,e)})}}function _(o,e){return{type:"LineString",coordinates:o.getCoordinates()}}function x(o,e){return{type:"MultiLineString",coordinates:o.getCoordinates()}}function R(o,e){return{type:"MultiPoint",coordinates:o.getCoordinates()}}function A(o,e){let t;return e&&(t=e.rightHanded),{type:"MultiPolygon",coordinates:o.getCoordinates(t)}}function I(o,e){return{type:"Point",coordinates:o.getCoordinates()}}function U(o,e){let t;return e&&(t=e.rightHanded),{type:"Polygon",coordinates:o.getCoordinates(t)}}const W=S;export{W as G};
